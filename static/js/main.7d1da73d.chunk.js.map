{"version":3,"sources":["Components/Nav.js","Components/Textarea.js","Components/About.js","Components/Alert .js","App.js","reportWebVitals.js","index.js"],"names":["Nav","props","btnText","mode","className","to","onClick","toggleMode","Textarea","useState","text","setText","rows","cols","value","onChange","e","target","placeholder","preventDefault","toUpperCase","showAlert","toLowerCase","str","trim","sentence","charAt","slice","arr","split","i","length","join","replace","About","Alert","alert","role","type","msg","App","setMode","setAlert","message","setTimeout","document","body","style","background","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d1da73d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Nav = (props) => {\n  const btnText = (props.mode===\"light\")?\"Enable Dark Mode\":\"Disable Dark Mode\"\n\n  return (\n      <nav className={`${props.mode}`===\"light\"?\"bg-yellow-500\":\"bg-gray-900 text-white\"}>\n        <ul className=\"flex\">\n          <li className=\"ml-5 p-3 font-sans font-bold text-2xl\"><Link to=\"/\">Text Formatter</Link></li>\n          <li className=\"px-2 py-1 my-3 font-sans text-xl hover:bg-green-500 hover:text-black rounded\"><Link to=\"/\">Home</Link></li>\n          <li className=\"px-2 py-1 my-3 font-sans text-xl hover:bg-green-500 hover:text-black rounded\"><Link to=\"/about\">About Us</Link></li>\n          <li className={`${props.mode}`===\"light\"?\"ml-auto mr-5 text-white font-bold text-sm mt-1 self-end\":\"ml-auto mr-5 font-bold text-sm mt-1 self-end\"}>\n            <button className={`${props.mode}`===\"light\"?\"bg-gray-800 hover:bg-gray-700 px-4 py-2 m-2 rounded\":\"bg-green-600 hover:bg-green-500 px-4 py-2 m-2 rounded\"} onClick={props.toggleMode}>{btnText}</button>\n          </li>\n        </ul>\n      </nav>\n  );\n};\n\nexport default Nav;\n","import React, { useState } from 'react';\n\nconst Textarea = (props) => {\n  const [text, setText] = useState('');\n\n  const textareaChange = (e) => {\n    setText(e.target.value);\n  }\n\n  const uppercaseText = (e) => {\n    e.preventDefault();\n    if (text !== '') {\n      setText(text.toUpperCase());\n      props.showAlert(\"converted to uppercase\", \"Success\")\n    }\n  }\n\n  const lowercaseText = (e) => {\n    e.preventDefault();\n    if (text !== '') {\n    setText(text.toLowerCase());\n    props.showAlert(\"converted to lowercase\", \"Success\")\n    }\n  }\n\n  const clearText = (e) => {\n    e.preventDefault();\n    if (text !== '') {\n    setText('');\n    props.showAlert(\"text cleared\", \"Success\")\n    }\n  }\n\n  const capitalizeText = (e) => {\n    e.preventDefault();\n    if (text !== '') {\n    const str = text.trim();\n    const sentence = str.charAt(0).toUpperCase() + str.slice(1);\n    setText(sentence);\n    props.showAlert(\"first letter capitalised\", \"Success\")\n    }\n  }\n\n  const capitalizeWords = (e) => {\n    e.preventDefault();\n    if (text !== '') {\n    const arr = text.split(\" \");\n    for (let i = 0; i < arr.length; i++)\n      arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\n    const str = arr.join(\" \");\n    setText(str);\n    props.showAlert(\"all words capitalised\", \"Success\")\n    }\n  }\n\n  const remExtraSpaces = (e) => {\n    e.preventDefault();\n    if (text !== '') {\n    setText(text.replace(/\\s+/g, ' ').trim());\n    props.showAlert(\"extra spaces removed\", \"Success\")\n    }\n  }\n\n  return (\n    <>\n      <form className=\"container\">\n        <div className=\"flex items-center justify-center mt-8 mb-7 text-xl\">\n          <textarea className={`${props.mode}` === \"light\" ? \"p-4 border-4 border-blue-500 focus:border-blue-400\" : \"p-4 border-4 border-yellow-500 focus:border-yellow-400 text-white bg-gray-800\"} rows=\"5\" cols=\"55\" value={text} onChange={textareaChange} placeholder=\"Enter your text here...\" />\n        </div>\n        <div className=\"flex items-center justify-center text-white font-bold\">\n          <button className={`${props.mode}` === \"light\" ? \"bg-blue-600 hover:bg-blue-700 py-2 px-4 rounded m-1 w-1/6\" : \"text-black bg-yellow-500 hover:bg-yellow-600 py-2 px-4 rounded m-1 w-1/6\"} onClick={uppercaseText}>Convert to Uppercase</button>\n          <button className={`${props.mode}` === \"light\" ? \"bg-blue-600 hover:bg-blue-700 py-2 px-4 rounded m-1 w-1/6\" : \"text-black bg-yellow-500 hover:bg-yellow-600 py-2 px-4 rounded m-1 w-1/6\"} onClick={lowercaseText}>Convert to Lowercase</button>\n          <button className={`${props.mode}` === \"light\" ? \"bg-blue-600 hover:bg-blue-700 py-2 px-4 rounded m-1 w-1/6\" : \"text-black bg-yellow-500 hover:bg-yellow-600 py-2 px-4 rounded m-1 w-1/6\"} onClick={clearText}>Clear Text</button>\n        </div>\n        <div className=\"flex items-center justify-center text-white font-bold\">\n          <button className={`${props.mode}` === \"light\" ? \"bg-blue-600 hover:bg-blue-700 py-2 px-4 rounded m-1 w-1/6\" : \"text-black bg-yellow-500 hover:bg-yellow-600 py-2 px-4 rounded m-1 w-1/6\"} onClick={capitalizeText}>Capitalize Sentence</button>\n          <button className={`${props.mode}` === \"light\" ? \"bg-blue-600 hover:bg-blue-700 py-2 px-4 rounded m-1 w-1/6\" : \"text-black bg-yellow-500 hover:bg-yellow-600 py-2 px-4 rounded m-1 w-1/6\"} onClick={capitalizeWords}>Capitalize Each Word</button>\n          <button className={`${props.mode}` === \"light\" ? \"bg-blue-600 hover:bg-blue-700 py-2 px-4 rounded m-1 w-1/6\" : \"text-black bg-yellow-500 hover:bg-yellow-600 py-2 px-4 rounded m-1 w-1/6\"} onClick={remExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n        <div className=\"w-1/2 flex flex-col mx-auto my-2\">\n          <h1 className={`${props.mode}` === \"light\" ? \"text-3xl text-bold px-2\" : \"text-3xl text-white text-bold px-2\"}>Your text summary:</h1>\n          <h3 className=\"bg-green-500 rounded-md p-1 m-1\">{(text === '') ? 0 : text.replace(/\\s+/g, ' ').trim().split(' ').length} Words and {text.length} Characters</h3>\n          <h3 className=\"bg-green-500 rounded-md p-1 m-1\">Could be read in {((text === '') ? 0 : text.replace(/\\s+/g, ' ').trim().split(' ').length) * (60 / 200)} seconds</h3>\n        </div>\n      </form>\n    </>\n  )\n}\n\nexport default Textarea\n","import React from 'react'\n\nconst About = (props) => {\n    return (\n        <div className=\"container mx-auto my-8 p-8 w-2/3 bg-red-400 rounded\">\n            <h1 className=\"text-3xl text-bold underline mb-3\">Welcome to Text Formatter</h1>\n            <p className=\"text-xl text-bold break-words\">\n            This website aims to help you with tasks where text formatting is needed. \n            It's not intended to replace a word processor, but the formatting tools \n            available here can help speed up some jobs which might otherwise be long\n            and repetitive.\n            </p>\n            <p className=\"text-xl text-bold break-words\">\n            Text Formatter can also quickly tell you how many words and characters \n            are there in your text.\n            </p>\n        </div>\n    )\n}\n\nexport default About\n","import React from 'react'\n\nconst Alert  = (props) => {\n    return (\n        <div className=\"h-10\">\n            {props.alert && \n            <div className=\"flex items-start justify-start p-1.5 border-2 border-green-600 bg-green-100 text-green-800 rounded\" role=\"alert\">\n                <strong>{props.alert.type}</strong>&nbsp;{props.alert.msg}           \n            </div>}\n        </div>\n    )\n}\n\nexport default Alert \n","import React, { useState } from 'react';\nimport Navbar from './Components/Nav';\nimport Textarea from './Components/Textarea';\nimport About from './Components/About'\nimport Alert from './Components/Alert ';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\")\n      document.body.style.background = \"#282828\"\n      showAlert(\"Dark mode enabled\", \"Success\")\n    }\n    else {\n      setMode(\"light\")\n      document.body.style.background = \"#bccad6\"\n      showAlert(\"Dark mode disabled\", \"Success\")\n    }\n  }\n\n  return (\n    <>\n      <Router>\n      <Navbar mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode}/>\n          </Route>\n          <Route exact path=\"/\">\n            <Textarea mode={mode} toggleMode={toggleMode} showAlert={showAlert}/>\n          </Route>\n      </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom/cjs/react-router-dom.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n    <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}